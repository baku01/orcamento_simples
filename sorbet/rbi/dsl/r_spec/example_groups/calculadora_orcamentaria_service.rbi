# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `RSpec::ExampleGroups::CalculadoraOrcamentariaService`.
# Please instead update this file by running `bin/tapioca dsl RSpec::ExampleGroups::CalculadoraOrcamentariaService`.


class RSpec::ExampleGroups::CalculadoraOrcamentariaService < RSpec::Core::ExampleGroup
  include ::RSpec::ExampleGroups::CalculadoraOrcamentariaService::LetDefinitions
  include ::RSpec::Rails::Matchers
  include ::RSpec::Rails::FixtureFileUploadSupport
  include ::RSpec::Rails::FileFixtureSupport
  include ::ActiveSupport::Testing::FileFixtures
  include ::RSpec::Rails::FixtureSupport::Fixtures
  include ::RSpec::Rails::FixtureSupport
  include ::ActiveRecord::TestFixtures
  include ::RSpec::Rails::MinitestAssertionAdapter
  include ::RSpec::Rails::MinitestLifecycleAdapter
  include ::RSpec::Rails::SetupAndTeardownAdapter

  class << self
    sig do
      params(
        args: T.untyped,
        block: T.proc.bind(RSpec::ExampleGroups::CalculadoraOrcamentariaService).void
      ).returns(T.untyped)
    end
    def after(*args, &block); end

    sig do
      params(
        args: T.untyped,
        block: T.proc.bind(RSpec::ExampleGroups::CalculadoraOrcamentariaService).void
      ).returns(T.untyped)
    end
    def before(*args, &block); end

    sig { returns(T.untyped) }
    def file_fixture_path; end

    sig { params(value: T.untyped).returns(T.untyped) }
    def file_fixture_path=(value); end

    sig { returns(T.untyped) }
    def file_fixture_path?; end

    sig { returns(T.untyped) }
    def fixture_class_names; end

    sig { params(value: T.untyped).returns(T.untyped) }
    def fixture_class_names=(value); end

    sig { returns(T.untyped) }
    def fixture_class_names?; end

    sig { returns(T.untyped) }
    def fixture_paths; end

    sig { params(value: T.untyped).returns(T.untyped) }
    def fixture_paths=(value); end

    sig { returns(T.untyped) }
    def fixture_paths?; end

    sig { returns(T.untyped) }
    def fixture_sets; end

    sig { params(value: T.untyped).returns(T.untyped) }
    def fixture_sets=(value); end

    sig { returns(T.untyped) }
    def fixture_sets?; end

    sig { returns(T.untyped) }
    def fixture_table_names; end

    sig { params(value: T.untyped).returns(T.untyped) }
    def fixture_table_names=(value); end

    sig { returns(T.untyped) }
    def fixture_table_names?; end

    sig do
      params(
        all_args: T.untyped,
        block: T.proc.bind(RSpec::ExampleGroups::CalculadoraOrcamentariaService).void
      ).returns(T.untyped)
    end
    def it(*all_args, &block); end

    sig do
      params(
        name: T.untyped,
        block: T.proc.bind(RSpec::ExampleGroups::CalculadoraOrcamentariaService).void
      ).returns(T.untyped)
    end
    def let(*name, &block); end

    sig do
      params(
        name: T.untyped,
        block: T.proc.bind(RSpec::ExampleGroups::CalculadoraOrcamentariaService).void
      ).returns(T.untyped)
    end
    def let!(*name, &block); end

    sig { returns(T.untyped) }
    def lock_threads; end

    sig { params(value: T.untyped).returns(T.untyped) }
    def lock_threads=(value); end

    sig { returns(T.untyped) }
    def lock_threads?; end

    sig { returns(T.untyped) }
    def pre_loaded_fixtures; end

    sig { params(value: T.untyped).returns(T.untyped) }
    def pre_loaded_fixtures=(value); end

    sig { returns(T.untyped) }
    def pre_loaded_fixtures?; end

    sig do
      params(
        all_args: T.untyped,
        block: T.proc.bind(RSpec::ExampleGroups::CalculadoraOrcamentariaService).void
      ).returns(T.untyped)
    end
    def specify(*all_args, &block); end

    sig { params(block: T.proc.bind(RSpec::ExampleGroups::CalculadoraOrcamentariaService).void).returns(T.untyped) }
    def subject(&block); end

    sig { returns(T.untyped) }
    def use_instantiated_fixtures; end

    sig { params(value: T.untyped).returns(T.untyped) }
    def use_instantiated_fixtures=(value); end

    sig { returns(T.untyped) }
    def use_instantiated_fixtures?; end

    sig { returns(T.untyped) }
    def use_transactional_tests; end

    sig { params(value: T.untyped).returns(T.untyped) }
    def use_transactional_tests=(value); end

    sig { returns(T.untyped) }
    def use_transactional_tests?; end
  end
end

module RSpec::ExampleGroups::CalculadoraOrcamentariaService::LetDefinitions; end
